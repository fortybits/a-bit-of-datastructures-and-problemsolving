package org.salesforce;

import java.io.*;
import java.util.*;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.toList;

// https://leetcode.com/problems/minimize-malware-spread/description/
public class NetworkMalware {

    /*
     * Complete the 'getNodeToRemove' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. UNWEIGHTED_INTEGER_GRAPH g
     *  2. INTEGER_ARRAY malware
     */

    /*
     * For the unweighted graph, <name>:
     *
     * 1. The number of nodes is <name>Nodes.
     * 2. The number of edges is <name>Edges.
     * 3. An edge exists between <name>From[i] and <name>To[i].
     *
     */
    public static int getNodeToRemove(int gNodes, List<Integer> gFrom, List<Integer> gTo, List<Integer> malware) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 0; i < gFrom.size(); i++) {
            int source = gFrom.get(i);
            int dest = gTo.get(i);
            if (graph.containsKey(source)) {
                graph.get(source).add(dest);
            } else {
                List<Integer> nodes = new ArrayList<>();
                nodes.add(dest);
                graph.put(source, nodes);
            }

            if (graph.containsKey(dest)) {
                graph.get(dest).add(source);
            } else {
                List<Integer> nodes = new ArrayList<>();
                nodes.add(source);
                graph.put(dest, nodes);
            }

        }

        List<Integer> corruptedNodes = new ArrayList<>();
        for (int i = 1; i <= gNodes; i++) {
            if (malware.get(i - 1).equals(1)) {
                corruptedNodes.add(i);
            }
        }

        int nodeToRemove = corruptedNodes.get(0);
        int maxAssociations = Integer.MIN_VALUE;
        // count the associations from these nodes
        for (int corruptedNode : corruptedNodes) {
            int countOfAssociations = 0;
            List<Integer> associatedNode = graph.getOrDefault(corruptedNode, new ArrayList<>());
            LinkedList<Integer> queue = new LinkedList<>();
            for (int associated : associatedNode) {
                queue.add(associated);
                countOfAssociations++;
            }
            while (!queue.isEmpty()) {
                int node = queue.poll();
                List<Integer> nextNodes = graph.getOrDefault(node, new ArrayList<>());
                for (int nnode : nextNodes) {
                    queue.add(nnode);
                    countOfAssociations++;
                }
            }
            if (countOfAssociations > maxAssociations) {
                maxAssociations = countOfAssociations;
                nodeToRemove = corruptedNode;
            }
        }
        return nodeToRemove;

    }


    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] gNodesEdges = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int gNodes = Integer.parseInt(gNodesEdges[0]);
        int gEdges = Integer.parseInt(gNodesEdges[1]);

        List<Integer> gFrom = new ArrayList<>();
        List<Integer> gTo = new ArrayList<>();

        IntStream.range(0, gEdges).forEach(i -> {
            try {
                String[] gFromTo = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                gFrom.add(Integer.parseInt(gFromTo[0]));
                gTo.add(Integer.parseInt(gFromTo[1]));
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int malwareCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> malware = IntStream.range(0, malwareCount).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine().replaceAll("\\s+$", "");
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                .map(String::trim)
                .map(Integer::parseInt)
                .collect(toList());

        int result = getNodeToRemove(gNodes, gFrom, gTo, malware);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        int[] parent = uf.getParent();
        int[] size = uf.getSize();

        int[] idToMalwareCount = new int[n];
        for (int i : initial) {
            idToMalwareCount[uf.find(i)]++;
        }

        Arrays.sort(initial);

        int maxSize = 0, malwareInMaxSize = initial[0];
        for (int i : initial) {
            // Get number of malwares in i's locating component
            int rootI = uf.find(i);
            int malwareCount = idToMalwareCount[rootI];
            if (malwareCount == 1) {
                // Update overall max size of such componnet and malwareInMaxSize
                int sz = size[rootI];
                if (sz > maxSize) {
                    maxSize = sz;
                    malwareInMaxSize = i;
                }
            }
        }

        return malwareInMaxSize;
    }

    class UF {
        private int[] parent;
        private int[] size;

        public UF(int n) {
            parent = new int[n];
            size = new int[n];

            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX != rootY) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            }
        }

        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }

            return parent[x] = find(parent[x]);
        }

        public int[] getParent() {
            return parent;
        }

        public int[] getSize() {
            return size;
        }
    }
}